from game_simulation import GameSimulation as gs
from training_data_value import DataGenerator as dg
from loss_point import lossPointPredict as lpp

import numpy as np
import keras
from keras.models import Sequential, load_model
from keras.layers import Conv2D
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.callbacks import EarlyStopping, TensorBoard
from keras.initializers import glorot_uniform
from keras.initializers import uniform
from keras.optimizers import Adam
from keras.utils import np_utils

TEN_MATRIX = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 16, 18, 24]
VALUE_SHAPE = [6, 6, 108] 

LOSS_POINT_MODEL = '../checkpoint/loss_point/weights_training.best.hdf5'
ZIMO_DATA = '../xml_data/zimo.dat'


def zimo_data_generator(datapath):
    batch_x, batch_y = [], []
    count = 0
    with open(datapath) as f:
        for line in f:
            gen = gs.data_gen_value(line)
            for item in gen:
                pass
            x, y = dg.lp_data_gen(item)
            batch_x.append(np.reshape(x, VALUE_SHAPE))
            batch_y.append(y)
            count += 1
            
            if count == 64:
                yield np.array(batch_x), np.array(batch_y)
                count = 0
                batch_x = []
                batch_y = []

class Prediction:
    def __init__(self):
        #self.lp_model = load_model(LOSS_POINT_MODEL)
        self.lp = lpp()
        self.lp_model = self.lp.create_model()

    def loss_point_pred(self, x):
        self.lp_model.load_weights('../checkpoint/loss_point/weights_without_zimo.best.hdf5')
        return self.lp_model.predict(np.reshape(x, [1, 6, 6, 108]))

    def loss_point_evaluate(self):
        self.lp_model.load_weights(LOSS_POINT_MODEL)
        return self.lp_model.evaluate_generator(zimo_data_generator(ZIMO_DATA), steps=1000)

if __name__ == '__main__':
    
    testli = [['F30', [[80, 18, 111, 108, 91, 94, 56, 60, 26, 83, 97, 52, 110], [25, 64, 12, 14, 44, 36, 6, 40, 84, 21, 89, 58, 50], [49, 23, 30, 87, 22, 61, 82, 99, 95, 53, 92, 55, 98, 93], [86, 29, 13, 15, 20, 19, 42, 8, 39, 46, 51, 88, 1]], [[], [], [], []], [[31, 122, 128, 102, 106, 127, 11, 54, 90], [116, 100, 131, 126, 135, 0, 2, 65, 34], [38, 121, 125, 5, 75, 74, 70, 3], [117, 130, 41, 73, 79, 77, 68, 59]], [14], 0, [], [24000], [0], [1]],
    ['G35', [[80, 18, 111, 108, 91, 94, 56, 60, 26, 83, 97, 52, 110], [25, 64, 12, 14, 44, 36, 6, 40, 84, 21, 89, 58, 50], [49, 23, 87, 22, 61, 82, 99, 95, 53, 92, 55, 98, 93], [86, 29, 13, 15, 20, 19, 42, 8, 39, 46, 51, 88, 1, 35]], [[], [], [], []], [[31, 122, 128, 102, 106, 127, 11, 54, 90], [116, 100, 131, 126, 135, 0, 2, 65, 34], [38, 121, 125, 5, 75, 74, 70, 3, 30], [117, 130, 41, 73, 79, 77, 68, 59]], [14], 0, [], [24000], [0], [1]],
    ['D76', [[80, 18, 111, 108, 91, 94, 56, 60, 26, 83, 97, 52, 110, 76], [25, 64, 12, 14, 44, 36, 6, 40, 84, 21, 89, 58, 50], [49, 23, 87, 22, 61, 82, 99, 95, 53, 92, 55, 98, 93], [86, 29, 13, 15, 20, 19, 42, 8, 39, 46, 51, 88, 1]], [[], [], [], []], [[31, 122, 128, 102, 106, 127, 11, 54, 90], [116, 100, 131, 126, 135, 0, 2, 65, 34], [38, 121, 125, 5, 75, 74, 70, 3, 30], [117, 130, 41, 73, 79, 77, 68, 59, 35]], [14], 0, [], [24000], [0], [1]],
    ['E89', [[80, 18, 111, 108, 91, 94, 56, 60, 26, 83, 97, 52, 110], [25, 64, 12, 14, 44, 36, 6, 40, 84, 21, 89, 58, 50, 37], [49, 23, 87, 22, 61, 82, 99, 95, 53, 92, 55, 98, 93], [86, 29, 13, 15, 20, 19, 42, 8, 39, 46, 51, 88, 1]], [[], [], [], []], [[31, 122, 128, 102, 106, 127, 11, 54, 90, 76], [116, 100, 131, 126, 135, 0, 2, 65, 34], [38, 121, 125, 5, 75, 74, 70, 3, 30], [117, 130, 41, 73, 79, 77, 68, 59, 35]], [14], 0, [0], [24000], [0], [1]],
    ['F55', [[80, 18, 111, 108, 91, 94, 56, 60, 26, 83, 97, 52, 110], [25, 64, 12, 14, 44, 36, 6, 40, 84, 21, 58, 50, 37], [49, 23, 22, 61, 99, 95, 53, 92, 55, 98, 93], [86, 29, 13, 15, 20, 19, 42, 8, 39, 46, 51, 88, 1]], [[], [], [[82, 87, 89]], []], [[31, 122, 128, 102, 106, 127, 11, 54, 90, 76], [116, 100, 131, 126, 135, 0, 2, 65, 34, 89], [38, 121, 125, 5, 75, 74, 70, 3, 30], [117, 130, 41, 73, 79, 77, 68, 59, 35]], [14], 0, [0], [24000], [0], [1]],
    ['D92', [[6, 3, 106, 94, 79, 98, 82, 37, 101, 73, 69, 38, 74, 92], [25, 32, 81, 50, 54, 43, 88, 28, 78, 93, 42, 116, 125], [49, 61, 97, 111, 110, 95, 89, 57, 16, 52, 44, 22, 59], [64, 58, 76, 66, 84, 96, 67, 80, 60, 99]], [[], [], [], [[7, 10, 12]]], [[118, 48, 56, 14, 122, 103, 30, 109, 100], [117, 121, 107, 112, 123, 108, 4, 8, 17, 51], [77, 72, 70, 10, 131, 71, 1, 120, 85, 91], [128, 113, 26, 105, 45, 102, 87, 119, 47, 135]], [33], 1, [], [['123', '-3', '226', '-5', '312', '-3', '339', '11']], [3], [3]],
    ['E42', [[6, 3, 106, 94, 79, 98, 82, 37, 101, 73, 69, 38, 74], [25, 32, 81, 50, 54, 43, 88, 28, 78, 93, 42, 116, 125, 90], [49, 61, 97, 111, 110, 95, 89, 57, 16, 52, 44, 22, 59], [64, 58, 76, 66, 84, 96, 67, 80, 60, 99]], [[], [], [], [[7, 10, 12]]], [[118, 48, 56, 14, 122, 103, 30, 109, 100, 92], [117, 121, 107, 112, 123, 108, 4, 8, 17, 51], [77, 72, 70, 10, 131, 71, 1, 120, 85, 91], [128, 113, 26, 105, 45, 102, 87, 119, 47, 135]], [33], 1, [], [['123', '-3', '226', '-5', '312', '-3', '339', '11']], [3], [3]],
    ['F59', [[6, 3, 106, 94, 79, 98, 82, 37, 101, 73, 69, 38, 74], [25, 32, 81, 50, 54, 43, 88, 28, 78, 93, 116, 125, 90], [61, 97, 111, 110, 95, 89, 57, 16, 52, 22, 59], [64, 58, 76, 66, 84, 96, 67, 80, 60, 99]], [[], [], [[42, 44, 49]], [[7, 10, 12]]], [[118, 48, 56, 14, 122, 103, 30, 109, 100, 92], [117, 121, 107, 112, 123, 108, 4, 8, 17, 51, 42], [77, 72, 70, 10, 131, 71, 1, 120, 85, 91], [128, 113, 26, 105, 45, 102, 87, 119, 47, 135]], [33], 1, [], [['123', '-3', '226', '-5', '312', '-3', '339', '11']], [3], [3]],
    ['G35', [[6, 3, 106, 94, 79, 98, 82, 37, 101, 73, 69, 38, 74], [25, 32, 81, 50, 54, 43, 88, 28, 78, 93, 116, 125, 90], [61, 97, 111, 110, 95, 89, 57, 16, 52, 22], [64, 58, 76, 66, 84, 96, 67, 80, 60, 99, 35]], [[], [], [[42, 44, 49]], [[7, 10, 12]]], [[118, 48, 56, 14, 122, 103, 30, 109, 100, 92], [117, 121, 107, 112, 123, 108, 4, 8, 17, 51, 42], [77, 72, 70, 10, 131, 71, 1, 120, 85, 91, 59], [128, 113, 26, 105, 45, 102, 87, 119, 47, 135]], [33], 1, [], [['123', '-3', '226', '-5', '312', '-3', '339', '11']], [3], [3]],
    ['D94', [[6, 3, 106, 94, 79, 98, 82, 37, 101, 73, 69, 38, 74, 63], [25, 32, 81, 50, 54, 43, 88, 28, 78, 93, 116, 125, 90], [61, 97, 111, 110, 95, 89, 57, 16, 52, 22], [64, 58, 76, 66, 84, 96, 67, 80, 60, 99]], [[], [], [[42, 44, 49]], [[7, 10, 12]]], [[118, 48, 56, 14, 122, 103, 30, 109, 100, 92], [117, 121, 107, 112, 123, 108, 4, 8, 17, 51, 42], [77, 72, 70, 10, 131, 71, 1, 120, 85, 91, 59], [128, 113, 26, 105, 45, 102, 87, 119, 47, 135, 35]], [33], 1, [], [['123', '-3', '226', '-5', '312', '-3', '339', '11']], [3], [3]]]

    pred = Prediction()
    print pred.loss_point_evaluate()
    '''
    for test in testli:
        data = dg.data2tiles(test)
        data = dg.mesen_transfer(data)
        batch = dg.loss_data_gen(data)
        if batch[0]:
            loss_pred = pred.loss_point_pred(batch[1])
            print loss_pred
    '''
